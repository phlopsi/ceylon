<project name="Ceylon JS compiler" default="test" basedir=".">

    <property file="../user-build.properties"/>
    <property file="../common-build.properties"/>
    <property file="../lib/build.properties"/>
    <property file="build.properties" />

    <!-- Set build directories for all formats. -->
    <property name="build.test-classes" location="${build.dir}/classes/test" />

    <property name="test-src" location="${basedir}/src/test/java" />
    <property name="test-lib" location="${build.lib}/compiler.js.test.jar" />
    <property name="src" location="${basedir}/src/main/java" />
    <property name="js-src" location="${basedir}/src/main/js" />
    <property name="runtime" value="${build.dir}/runtime" />
    <property name="language.dir" location="${basedir}/../language" />

    <property name="jslangpath" value="ceylon/language/${module.com.redhat.ceylon.compiler.js.version}" />
    <property name="jslangmodule" value="${jslangpath}/ceylon.language-${module.com.redhat.ceylon.compiler.js.version}.js" />
    <property name="jslangmodel" value="${jslangpath}/ceylon.language-${module.com.redhat.ceylon.compiler.js.version}-model.js" />
    
    <tstamp />

    <!-- Local repository -->
    <property name="ceylon.js.repo" value="${ceylon.repo.dir}/${ceylon.js.dir}" />
    <property name="ceylon.js.dist" value="${build.dist.repo}/${ceylon.js.dir}"/>
    <property name="ceylon.js.src" value="${ceylon.js.dir}/com.redhat.ceylon.compiler.js-${module.com.redhat.ceylon.compiler.js.version}.src" />

    <path id="test.run.classpath">
        <pathelement path="${antlr.lib}"/>
        <pathelement path="${json.lib}" />
        <pathelement path="${ceylon.common.lib}" />
        <pathelement path="${ceylon.cli.lib}" />
        <pathelement path="${ceylon.model.lib}" />
        <pathelement path="${ceylon.module-resolver.lib}" />
        <pathelement path="${ceylon.module-resolver-javascript.lib}" />
        <pathelement path="${ceylon.compiler.lib}" />
        <pathelement path="${ceylon.typechecker.lib}" />
        <pathelement path="${ceylon.classfile.lib}" />
        <pathelement path="${build.classes}" />
        <pathelement path="${build.test-classes}" />
    </path>

    <!-- Rule to clean everything up -->
    <target name="clean" description="Clean up everything">
        <delete dir="${build.dir}" />
    </target>

    <!-- project compilation -->
    <target name="compile" description="compile the js compiler">
        <mkdir dir="${runtime}/${jslangpath}" />
        <mkdir dir="${build.classes}" />
        <!-- compile Java sources -->
        <javac srcdir="${src}" destdir="${build.classes}" debug="true" encoding="UTF-8" target="${compile.java.target}" source="${compile.java.source}" bootclasspath="${compile.java.bootclasspath}">
            <classpath>
                <pathelement path="${antlr.lib}"/>
                <pathelement path="${ceylon.common.lib}" />
                <pathelement path="${ceylon.cli.lib}" />
                <pathelement path="${ceylon.model.lib}" />
                <pathelement path="${ceylon.typechecker.lib}" />
                <pathelement path="${ceylon.module-resolver.lib}" />
                <pathelement path="${ceylon.module-resolver-javascript.lib}" />
                <pathelement path="${ceylon.compiler.lib}" />
                <pathelement path="${json.lib}" />
            </classpath>
            <include name="**/*.java" />
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="${src}">
                <include name="META-INF/**/*"/>
                <include name="com/redhat/**/resources/**" />
                <include name="com/redhat/**/*.properties" />
            </fileset>
        </copy>
        <!-- 
         We need a second compilation step to compile entry points compatible with Java 5
         to be able to produce nice error messages for older Java versions 
        -->
        <delete dir="${build.classes}">
            <include name="**/*Main5.class"/>
        </delete>
        <javac srcdir="${src}" destdir="${build.classes}" debug="true" encoding="UTF-8" source="1.5" target="1.5">
            <classpath>
                <pathelement path="${antlr.lib}"/>
                <pathelement path="${ceylon.common.lib}" />
                <pathelement path="${ceylon.model.lib}" />
                <pathelement path="${ceylon.typechecker.lib}" />
                <pathelement path="${ceylon.module-resolver.lib}" />
                <pathelement path="${ceylon.compiler.lib}" />
            </classpath>
            <include name="**/*Main5.java" />
        </javac>
    </target>

    <!-- build jscompiler jar -->
    <target name="ceylon.js.jar" depends="compile">
        <mkdir dir="${build.dist.repo}/${ceylon.js.dir}"/>
        <mkdir dir="${build.bin}"/>
        <tstamp>
            <format property="qualifier" timezone="GMT" pattern="yyyyMMdd-HHmm"/>
        </tstamp>        
        <jar destfile="${ceylon.js.lib}">
            <fileset dir="${build.classes}">
            </fileset>
            <manifest>
                <attribute name="Bundle-SymbolicName" value="com.redhat.ceylon.compiler.js"/>
                <attribute name="Bundle-Version" value="${module.com.redhat.ceylon.compiler.js.osgi.version}-${qualifier}"/>
            </manifest>
        </jar>
        <antcall target="sha1sum">
            <param name="file" value="${ceylon.js.lib}" />
        </antcall>
    </target>

    <!-- generate the ceylon.language.js file -->
    <target name="build-js-language-module" depends="compile" unless="skip.language.module">
        <java classname="com.redhat.ceylon.compiler.js.Stitcher" classpathref="test.run.classpath" fork="true" failonerror="yes">
            <arg value="../language/runtime-js/MASTER.txt" />
            <arg value="${runtime}/${jslangmodule}" />
        </java>
        <antcall target="sha1sum">
            <param name="file" value="${runtime}/${jslangmodel}" />
        </antcall>
    </target>

    <target name="build" depends="ceylon.js.jar,build-js-language-module">
        <mkdir dir="${build.bin}" />
        <copy todir="${build.bin}">
            <fileset dir="${basedir}/bin">
            </fileset>
            <filterset>
                <filter token="ceylon-version" value="${ceylon.version}"/>
            </filterset>
        </copy>
    </target>

    <target name="test-compile">
        <mkdir dir="${build.test-classes}" />
        <javac srcdir="${test-src}" destdir="${build.test-classes}" debug="true" encoding="UTF-8" target="${compile.java.target}" source="${compile.java.source}" bootclasspath="${compile.java.bootclasspath}">
            <classpath>
                <pathelement location="${ceylon.common.lib}" />
                <pathelement location="${ceylon.model.lib}" />
                <pathelement location="${ceylon.cli.lib}" />
                <pathelement location="${ceylon.typechecker.lib}" />
                <pathelement location="${ceylon.module-resolver.lib}" />
                <pathelement location="${ceylon.module-resolver-javascript.lib}" />
                <pathelement location="${ceylon.compiler.lib}" />
                <pathelement location="${build.classes}" />
                <fileset dir="../lib">
                    <include name="**/*.jar" />
                </fileset>
            </classpath>
        </javac>
        <jar destfile="${test-lib}">
            <fileset dir="${build.test-classes}">
            </fileset>
        </jar>
    </target>

    <target name="compiletest" depends="test-compile">
        <java classname="MainForJsTest" classpathref="test.run.classpath" failonerror="true">
            <sysproperty key="file.encoding" value="UTF-8" />
            <arg value="${basedir}/src/test/ceylon"/>
            <arg value="${language.dir}/test"/>
            <arg value="X:${language.dir}/test/jvm"/>
            <arg value="R:${language.dir}/test-resource" />
            <arg value="r:${language.dir}/test-resource/resource.txt" />
            <arg value="r:${language.dir}/test-resource/resmod/modres.txt" />
        </java>
    </target>

    <target name="test" depends="build,test-quick" description="Run generated source comparison tests" />

    <target name="test-quick" depends="compiletest" />

    <target name="noderun">
        <echo message="Running tests on node.js (node must be installed)" />
        <java classname="NodeTest" classpathref="test.run.classpath" failonerror="true">
            <arg value="${build.test}/proto" />
        </java>
    </target>

    <target name="nodetest" depends="build-js-language-module,compiletest,noderun" description="Run tests on node.js (requires node)">
    </target>

    <!-- Repository targets -->
    <target name="init.repo"
            description="Initialize the default local Ceylon module repository">
        <mkdir dir="${ceylon.js.repo}"/>
    </target>
    <target name="clean.repo"
            description="Clean default local Ceylon module repository">
        <delete file="${ceylon.js.lib}"/>
        <delete file="${ceylon.js.lib}.sha1"/>
        <delete file="${ceylon.repo.dir}/${ceylon.js.src}" />
        <delete file="${ceylon.repo.dir}/${ceylon.js.src}.sha1" />
    </target>

    <target name="dist" depends="build"
            description="Create Ceylon JS compiler distribution">
        <zip destfile="${build.dist.repo}/${ceylon.js.src}">
            <fileset dir="${src}">
                <include name="**/*.java"/>
            </fileset>
        </zip>
        <antcall target="sha1sum">
            <param name="file" value="${build.dist.repo}/${ceylon.js.src}"/>
        </antcall>
    </target>

    <target name="publish"
            depends="clean.repo,init.repo,dist,publish-internal"
            description="Publish Ceylon JS compiler module to default repo">
    </target>

    <target name="publish-internal" depends="init.repo">
        <copy todir="${ceylon.repo.dir}" overwrite="true">
            <fileset dir="${build.dist.repo}"/>
            <fileset dir="${runtime}"/>
        </copy>
        <copy todir="${ceylon.bin.dir}" overwrite="true">
            <fileset dir="${build.bin}"/>
        </copy>
    </target>

    <target name="bundle-proxy">
        <basename file="${archivePath}" property="archiveFileName"/>
        <property name="proxy-project" value="${eclipse.project.path}/required-bundle-proxies/${archiveFileName}"/>
        <mkdir dir="${proxy-project}"/>
        <delete failonerror="false" dir="${proxy-project}/META-INF"/>
        <copy toDir="${proxy-project}" overwrite="true">
            <zipfileset src="${archivePath}" includes="META-INF/**"/>
            <fileset file="${archivePath}"/>
        </copy>
        <manifest file="${proxy-project}/META-INF/MANIFEST.MF" mode="update">
            <attribute name="Bundle-Classpath" value="${archiveFileName}"/>
        </manifest>
        <echo file="${proxy-project}/.project"><![CDATA[<projectDescription>
    <name>${archiveFileName}</name>
    <comment></comment>
    <projects>
    </projects>
    <buildSpec>
        <buildCommand>
            <name>org.eclipse.jdt.core.javabuilder</name>
            <arguments>
            </arguments>
        </buildCommand>
        <buildCommand>
            <name>org.eclipse.pde.ManifestBuilder</name>
            <arguments>
            </arguments>
        </buildCommand>
        <buildCommand>
            <name>org.eclipse.pde.SchemaBuilder</name>
            <arguments>
            </arguments>
        </buildCommand>
    </buildSpec>
    <natures>
        <nature>org.eclipse.pde.PluginNature</nature>
        <nature>org.eclipse.jdt.core.javanature</nature>
    </natures>
    <linkedResources>
        <link>
            <name>project</name>
            <type>2</type>
            <locationURI>PARENT-3-PROJECT_LOC/ceylon/compiler-js</locationURI>
        </link>
    </linkedResources>
</projectDescription>]]></echo>     
        <echo file="${proxy-project}/.classpath"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<classpath>
    <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
    <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
    <classpathentry exported="true" kind="lib" path="${archiveFileName}" sourcepath="project"/>
    <classpathentry kind="output" path="bin"/>
</classpath>]]></echo>     
        <echo file="${proxy-project}/.gitignore"><![CDATA[/META-INF
/${archiveFileName}
/.classpath
/.project
/.gitignore
/bin/]]></echo>     
    </target>
    
    <target name="ide-quick-internal">
        <antcall target="bundle-proxy">
            <param name="archivePath" value="${ceylon.repo.dir}/${ceylon.js.jar}"/>
        </antcall>
    </target>

    <!-- constant to declare a file binary for checksumsum -->
    <property name="checksum.binary-prefix" value=" *" />
    <!-- Helper target, used to create a sha1 checksum file  -->
    <!-- Requires 'file' as a parameter. -->
    <target name="sha1sum">
        <fail unless="file"/>
        <fail if="filename"/>
        <fail if="value"/>
        <basename file="${file}" property="filename"/>
        <checksum file="${file}" property="value" algorithm="sha1"/>
        <echo file="${file}.sha1" message="${value}"/>
    </target>

</project>
