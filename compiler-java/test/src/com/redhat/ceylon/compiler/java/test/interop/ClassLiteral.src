package com.redhat.ceylon.compiler.java.test.interop;

final class classLiteral_ {
    
    private classLiteral_() {
    }
    
    static <T>void classLiteral(final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T) {
        final .ceylon.language.meta.model.Class c = (.ceylon.language.meta.model.Class<? extends .ceylon.language.String, ? super .ceylon.language.Sequence<? extends .ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>>>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.String.$TypeDescriptor$);
        .ceylon.language.String lhs$0 = .ceylon.language.String.instance("ceylon.language::String");
        .ceylon.language.String rhs$1 = .ceylon.language.String.instance(c.toString());
        if (lhs$0.equals(rhs$1)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"ceylon.language::String\"==c.string") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$0, rhs$1));
        }
        .ceylon.language.String lhs$2 = .ceylon.language.String.instance("class ceylon.language.String");
        .ceylon.language.String rhs$3 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(c)));
        if (lhs$2.equals(rhs$3)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class ceylon.language.String\"==ClassLiteral.classString(c)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$2, rhs$3));
        }
        .ceylon.language.String lhs$4 = .ceylon.language.String.instance("class ceylon.language.String");
        .ceylon.language.String rhs$5 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.String.class));
        if (lhs$4.equals(rhs$5)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class ceylon.language.String\"==ClassLiteral.classString(`String`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$4, rhs$5));
        }
        .ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object> x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends .ceylon.language.String, ? super .ceylon.language.Sequence<? extends .ceylon.language.Iterable<? extends .ceylon.language.Character, ? extends .java.lang.Object>>>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.String.$TypeDescriptor$);
        .ceylon.language.String lhs$6 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$7 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.String.class));
        if (lhs$6.equals(rhs$7)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`String`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$6, rhs$7));
        }
        .ceylon.language.String lhs$8 = .ceylon.language.String.instance("class ceylon.language.Integer");
        .ceylon.language.String rhs$9 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Integer.class));
        if (lhs$8.equals(rhs$9)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class ceylon.language.Integer\"==ClassLiteral.classString(`Integer`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$8, rhs$9));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends .ceylon.language.Integer, ? super .ceylon.language.Sequence<? extends .ceylon.language.Integer>>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.Integer.$TypeDescriptor$);
        .ceylon.language.String lhs$10 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$11 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Integer.class));
        if (lhs$10.equals(rhs$11)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`Integer`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$10, rhs$11));
        }
        .ceylon.language.String lhs$12 = .ceylon.language.String.instance("class ceylon.language.Boolean");
        .ceylon.language.String rhs$13 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Boolean.class));
        if (lhs$12.equals(rhs$13)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class ceylon.language.Boolean\"==ClassLiteral.classString(`Boolean`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$12, rhs$13));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.Boolean.$TypeDescriptor$);
        .ceylon.language.String lhs$14 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$15 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Boolean.class));
        if (lhs$14.equals(rhs$15)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`Boolean`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$14, rhs$15));
        }
        .ceylon.language.String lhs$16 = .ceylon.language.String.instance("class ceylon.language.Float");
        .ceylon.language.String rhs$17 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Float.class));
        if (lhs$16.equals(rhs$17)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class ceylon.language.Float\"==ClassLiteral.classString(`Float`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$16, rhs$17));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends .ceylon.language.Float, ? super .ceylon.language.Sequence<? extends .ceylon.language.Float>>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.Float.$TypeDescriptor$);
        .ceylon.language.String lhs$18 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$19 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Float.class));
        if (lhs$18.equals(rhs$19)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`Float`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$18, rhs$19));
        }
        .ceylon.language.String lhs$20 = .ceylon.language.String.instance("class ceylon.language.Character");
        .ceylon.language.String rhs$21 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Character.class));
        if (lhs$20.equals(rhs$21)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class ceylon.language.Character\"==ClassLiteral.classString(`Character`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$20, rhs$21));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends .ceylon.language.Character, ? super .ceylon.language.Sequence<? extends .ceylon.language.Character>>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.Character.$TypeDescriptor$);
        .ceylon.language.String lhs$22 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$23 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Character.class));
        if (lhs$22.equals(rhs$23)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`Character`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$22, rhs$23));
        }
        .ceylon.language.String lhs$24 = .ceylon.language.String.instance("class ceylon.language.Byte");
        .ceylon.language.String rhs$25 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Byte.class));
        if (lhs$24.equals(rhs$25)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class ceylon.language.Byte\"==ClassLiteral.classString(`Byte`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$24, rhs$25));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends .ceylon.language.Byte, ? super .ceylon.language.Sequence<? extends .ceylon.language.Integer>>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.Byte.$TypeDescriptor$);
        .ceylon.language.String lhs$26 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$27 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Byte.class));
        if (lhs$26.equals(rhs$27)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`Byte`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$26, rhs$27));
        }
        .ceylon.language.String lhs$28 = .ceylon.language.String.instance("class java.lang.Object");
        .ceylon.language.String rhs$29 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Object.class));
        if (lhs$28.equals(rhs$29)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class java.lang.Object\"==ClassLiteral.classString(`Object`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$28, rhs$29));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.Object.$TypeDescriptor$);
        .ceylon.language.String lhs$30 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$31 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Object.class));
        if (lhs$30.equals(rhs$31)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`Object`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$30, rhs$31));
        }
        .ceylon.language.String lhs$32 = .ceylon.language.String.instance("class java.lang.Object");
        .ceylon.language.String rhs$33 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Object.class));
        if (lhs$32.equals(rhs$33)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class java.lang.Object\"==ClassLiteral.classString(`Basic`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$32, rhs$33));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.Basic.$TypeDescriptor$);
        .ceylon.language.String lhs$34 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$35 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Object.class));
        if (lhs$34.equals(rhs$35)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`Basic`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$34, rhs$35));
        }
        .ceylon.language.String lhs$36 = .ceylon.language.String.instance("class java.lang.Object");
        .ceylon.language.String rhs$37 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Object.class));
        if (lhs$36.equals(rhs$37)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class java.lang.Object\"==ClassLiteral.classString(`Identifiable`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$36, rhs$37));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Interface<? extends .java.lang.Object>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.Identifiable.$TypeDescriptor$);
        .ceylon.language.String lhs$38 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$39 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Object.class));
        if (lhs$38.equals(rhs$39)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`Identifiable`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$38, rhs$39));
        }
        .ceylon.language.String lhs$40 = .ceylon.language.String.instance("class java.lang.Throwable");
        .ceylon.language.String rhs$41 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Throwable.class));
        if (lhs$40.equals(rhs$41)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class java.lang.Throwable\"==ClassLiteral.classString(`Throwable`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$40, rhs$41));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.Throwable.$TypeDescriptor$);
        .ceylon.language.String lhs$42 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$43 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Throwable.class));
        if (lhs$42.equals(rhs$43)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`Throwable`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$42, rhs$43));
        }
        .ceylon.language.String lhs$44 = .ceylon.language.String.instance("class java.lang.Exception");
        .ceylon.language.String rhs$45 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Exception.class));
        if (lhs$44.equals(rhs$45)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class java.lang.Exception\"==ClassLiteral.classString(`Exception`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$44, rhs$45));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.Exception.$TypeDescriptor$);
        .ceylon.language.String lhs$46 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$47 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Exception.class));
        if (lhs$46.equals(rhs$47)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`Exception`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$46, rhs$47));
        }
        .ceylon.language.String lhs$48 = .ceylon.language.String.instance("interface java.lang.annotation.Annotation");
        .ceylon.language.String rhs$49 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.annotation.Annotation.class));
        if (lhs$48.equals(rhs$49)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"interface java.lang.annotation.Annotation\"==ClassLiteral.classString(`Annotation`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$48, rhs$49));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Interface<? extends .java.lang.annotation.Annotation>).ceylon.language.meta.typeLiteral_.typeLiteral(.ceylon.language.Annotation.$TypeDescriptor$);
        .ceylon.language.String lhs$50 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$51 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.annotation.Annotation.class));
        if (lhs$50.equals(rhs$51)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`Annotation`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$50, rhs$51));
        }
        .ceylon.language.String lhs$52 = .ceylon.language.String.instance("interface java.lang.annotation.Annotation");
        .ceylon.language.String rhs$53 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.annotation.Annotation.class));
        if (lhs$52.equals(rhs$53)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"interface java.lang.annotation.Annotation\"==ClassLiteral.classString(`ConstrainedAnnotation`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$52, rhs$53));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Interface<? extends .java.lang.annotation.Annotation>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.ConstrainedAnnotation.class, .ceylon.language.Annotation.$TypeDescriptor$, .ceylon.language.Anything.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, .ceylon.language.Anything.$TypeDescriptor$));
        .ceylon.language.String lhs$54 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$55 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.annotation.Annotation.class));
        if (lhs$54.equals(rhs$55)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ConstrainedAnnotation`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$54, rhs$55));
        }
        .ceylon.language.String lhs$56 = .ceylon.language.String.instance("class [Lceylon.language.String;");
        .ceylon.language.String rhs$57 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.String[].class));
        if (lhs$56.equals(rhs$57)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [Lceylon.language.String;\"==ClassLiteral.classString(`ObjectArray<String>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$56, rhs$57));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends .ceylon.language.String[], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.language.ObjectArray.class, .ceylon.language.String.$TypeDescriptor$));
        .ceylon.language.String lhs$58 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$59 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.String[].class));
        if (lhs$58.equals(rhs$59)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ObjectArray<String>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$58, rhs$59));
        }
        .ceylon.language.String lhs$60 = .ceylon.language.String.instance("class [I");
        .ceylon.language.String rhs$61 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(int[].class));
        if (lhs$60.equals(rhs$61)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [I\"==ClassLiteral.classString(`IntArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$60, rhs$61));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends int[], ? super .ceylon.language.Sequence<? extends .ceylon.language.Integer>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.language.IntArray.$TypeDescriptor$);
        .ceylon.language.String lhs$62 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$63 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(int[].class));
        if (lhs$62.equals(rhs$63)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`IntArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$62, rhs$63));
        }
        .ceylon.language.String lhs$64 = .ceylon.language.String.instance("class [S");
        .ceylon.language.String rhs$65 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(short[].class));
        if (lhs$64.equals(rhs$65)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [S\"==ClassLiteral.classString(`ShortArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$64, rhs$65));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends short[], ? super .ceylon.language.Sequence<? extends .ceylon.language.Integer>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.language.ShortArray.$TypeDescriptor$);
        .ceylon.language.String lhs$66 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$67 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(short[].class));
        if (lhs$66.equals(rhs$67)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ShortArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$66, rhs$67));
        }
        .ceylon.language.String lhs$68 = .ceylon.language.String.instance("class [J");
        .ceylon.language.String rhs$69 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(long[].class));
        if (lhs$68.equals(rhs$69)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [J\"==ClassLiteral.classString(`LongArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$68, rhs$69));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends long[], ? super .ceylon.language.Sequence<? extends .ceylon.language.Integer>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.language.LongArray.$TypeDescriptor$);
        .ceylon.language.String lhs$70 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$71 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(long[].class));
        if (lhs$70.equals(rhs$71)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`LongArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$70, rhs$71));
        }
        .ceylon.language.String lhs$72 = .ceylon.language.String.instance("class [B");
        .ceylon.language.String rhs$73 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(byte[].class));
        if (lhs$72.equals(rhs$73)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [B\"==ClassLiteral.classString(`ByteArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$72, rhs$73));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends byte[], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.language.ByteArray.$TypeDescriptor$);
        .ceylon.language.String lhs$74 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$75 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(byte[].class));
        if (lhs$74.equals(rhs$75)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ByteArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$74, rhs$75));
        }
        .ceylon.language.String lhs$76 = .ceylon.language.String.instance("class [C");
        .ceylon.language.String rhs$77 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(char[].class));
        if (lhs$76.equals(rhs$77)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [C\"==ClassLiteral.classString(`CharArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$76, rhs$77));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends char[], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.language.CharArray.$TypeDescriptor$);
        .ceylon.language.String lhs$78 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$79 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(char[].class));
        if (lhs$78.equals(rhs$79)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`CharArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$78, rhs$79));
        }
        .ceylon.language.String lhs$80 = .ceylon.language.String.instance("class [F");
        .ceylon.language.String rhs$81 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(float[].class));
        if (lhs$80.equals(rhs$81)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [F\"==ClassLiteral.classString(`FloatArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$80, rhs$81));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends float[], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.language.FloatArray.$TypeDescriptor$);
        .ceylon.language.String lhs$82 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$83 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(float[].class));
        if (lhs$82.equals(rhs$83)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`FloatArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$82, rhs$83));
        }
        .ceylon.language.String lhs$84 = .ceylon.language.String.instance("class [D");
        .ceylon.language.String rhs$85 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(double[].class));
        if (lhs$84.equals(rhs$85)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [D\"==ClassLiteral.classString(`DoubleArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$84, rhs$85));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends double[], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.language.DoubleArray.$TypeDescriptor$);
        .ceylon.language.String lhs$86 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$87 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(double[].class));
        if (lhs$86.equals(rhs$87)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`DoubleArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$86, rhs$87));
        }
        .ceylon.language.String lhs$88 = .ceylon.language.String.instance("class [Z");
        .ceylon.language.String rhs$89 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(boolean[].class));
        if (lhs$88.equals(rhs$89)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [Z\"==ClassLiteral.classString(`BooleanArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$88, rhs$89));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends boolean[], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.language.BooleanArray.$TypeDescriptor$);
        .ceylon.language.String lhs$90 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$91 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(boolean[].class));
        if (lhs$90.equals(rhs$91)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`BooleanArray`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$90, rhs$91));
        }
        .ceylon.language.String lhs$92 = .ceylon.language.String.instance("class [Ljava.lang.Object;");
        .ceylon.language.String rhs$93 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Object[].class));
        if (lhs$92.equals(rhs$93)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [Ljava.lang.Object;\"==ClassLiteral.classString(`ObjectArray<Object>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$92, rhs$93));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends .java.lang.Object[], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.language.ObjectArray.class, .ceylon.language.Object.$TypeDescriptor$));
        .ceylon.language.String lhs$94 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$95 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Object[].class));
        if (lhs$94.equals(rhs$95)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ObjectArray<Object>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$94, rhs$95));
        }
        .ceylon.language.String lhs$96 = .ceylon.language.String.instance("class [Ljava.lang.Object;");
        .ceylon.language.String rhs$97 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Object[].class));
        if (lhs$96.equals(rhs$97)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [Ljava.lang.Object;\"==ClassLiteral.classString(`ObjectArray<Basic>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$96, rhs$97));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends .java.lang.Object[], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.language.ObjectArray.class, .ceylon.language.Basic.$TypeDescriptor$));
        .ceylon.language.String lhs$98 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$99 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Object[].class));
        if (lhs$98.equals(rhs$99)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ObjectArray<Basic>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$98, rhs$99));
        }
        .ceylon.language.String lhs$100 = .ceylon.language.String.instance("class [Ljava.lang.Object;");
        .ceylon.language.String rhs$101 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Object[].class));
        if (lhs$100.equals(rhs$101)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [Ljava.lang.Object;\"==ClassLiteral.classString(`ObjectArray<Identifiable>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$100, rhs$101));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends .java.lang.Object[], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.language.ObjectArray.class, .ceylon.language.Identifiable.$TypeDescriptor$));
        .ceylon.language.String lhs$102 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$103 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Object[].class));
        if (lhs$102.equals(rhs$103)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ObjectArray<Identifiable>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$102, rhs$103));
        }
        .ceylon.language.String lhs$104 = .ceylon.language.String.instance("class [Ljava.lang.Throwable;");
        .ceylon.language.String rhs$105 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Throwable[].class));
        if (lhs$104.equals(rhs$105)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [Ljava.lang.Throwable;\"==ClassLiteral.classString(`ObjectArray<Throwable>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$104, rhs$105));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends .java.lang.Throwable[], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.language.ObjectArray.class, .ceylon.language.Throwable.$TypeDescriptor$));
        .ceylon.language.String lhs$106 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$107 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Throwable[].class));
        if (lhs$106.equals(rhs$107)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ObjectArray<Throwable>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$106, rhs$107));
        }
        .ceylon.language.String lhs$108 = .ceylon.language.String.instance("class [Ljava.lang.Exception;");
        .ceylon.language.String rhs$109 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Exception[].class));
        if (lhs$108.equals(rhs$109)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [Ljava.lang.Exception;\"==ClassLiteral.classString(`ObjectArray<Exception>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$108, rhs$109));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends .java.lang.Exception[], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.language.ObjectArray.class, .ceylon.language.Exception.$TypeDescriptor$));
        .ceylon.language.String lhs$110 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$111 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.Exception[].class));
        if (lhs$110.equals(rhs$111)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ObjectArray<Exception>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$110, rhs$111));
        }
        .ceylon.language.String lhs$112 = .ceylon.language.String.instance("class [Ljava.lang.annotation.Annotation;");
        .ceylon.language.String rhs$113 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.annotation.Annotation[].class));
        if (lhs$112.equals(rhs$113)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [Ljava.lang.annotation.Annotation;\"==ClassLiteral.classString(`ObjectArray<Annotation>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$112, rhs$113));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends .java.lang.annotation.Annotation[], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.language.ObjectArray.class, .ceylon.language.Annotation.$TypeDescriptor$));
        .ceylon.language.String lhs$114 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$115 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.annotation.Annotation[].class));
        if (lhs$114.equals(rhs$115)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ObjectArray<Annotation>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$114, rhs$115));
        }
        .ceylon.language.String lhs$116 = .ceylon.language.String.instance("class [Ljava.lang.annotation.Annotation;");
        .ceylon.language.String rhs$117 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.annotation.Annotation[].class));
        if (lhs$116.equals(rhs$117)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [Ljava.lang.annotation.Annotation;\"==ClassLiteral.classString(`ObjectArray<ConstrainedAnnotation>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$116, rhs$117));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends .java.lang.annotation.Annotation[], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.language.ObjectArray.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.ConstrainedAnnotation.class, .ceylon.language.Annotation.$TypeDescriptor$, .ceylon.language.Anything.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, .ceylon.language.Anything.$TypeDescriptor$)));
        .ceylon.language.String lhs$118 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$119 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.lang.annotation.Annotation[].class));
        if (lhs$118.equals(rhs$119)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ObjectArray<ConstrainedAnnotation>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$118, rhs$119));
        }
        .ceylon.language.String lhs$120 = .ceylon.language.String.instance("class [[I");
        .ceylon.language.String rhs$121 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(int[][].class));
        if (lhs$120.equals(rhs$121)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [[I\"==ClassLiteral.classString(`ObjectArray<IntArray>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$120, rhs$121));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends int[][], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.language.ObjectArray.class, .com.redhat.ceylon.compiler.java.language.IntArray.$TypeDescriptor$));
        .ceylon.language.String lhs$122 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$123 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(int[][].class));
        if (lhs$122.equals(rhs$123)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ObjectArray<IntArray>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$122, rhs$123));
        }
        .ceylon.language.String lhs$124 = .ceylon.language.String.instance("class [[Lceylon.language.String;");
        .ceylon.language.String rhs$125 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.String[][].class));
        if (lhs$124.equals(rhs$125)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class [[Lceylon.language.String;\"==ClassLiteral.classString(`ObjectArray<ObjectArray<String>>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$124, rhs$125));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Class<? extends .ceylon.language.String[][], ? super .ceylon.language.Sequence<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.language.ObjectArray.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.language.ObjectArray.class, .ceylon.language.String.$TypeDescriptor$)));
        .ceylon.language.String lhs$126 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$127 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.String[][].class));
        if (lhs$126.equals(rhs$127)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ObjectArray<ObjectArray<String>>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$126, rhs$127));
        }
        .ceylon.language.String lhs$128 = .ceylon.language.String.instance("interface ceylon.language.Set");
        .ceylon.language.String rhs$129 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Set.class));
        if (lhs$128.equals(rhs$129)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"interface ceylon.language.Set\"==ClassLiteral.classString(`Set<String>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$128, rhs$129));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Interface<? extends .ceylon.language.Set<? extends .ceylon.language.String>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Set.class, .ceylon.language.String.$TypeDescriptor$));
        .ceylon.language.String lhs$130 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$131 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Set.class));
        if (lhs$130.equals(rhs$131)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`Set<String>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$130, rhs$131));
        }
        .ceylon.language.String lhs$132 = .ceylon.language.String.instance("interface ceylon.language.Set");
        .ceylon.language.String rhs$133 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Set.class));
        if (lhs$132.equals(rhs$133)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"interface ceylon.language.Set\"==ClassLiteral.classString(`Set<T>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$132, rhs$133));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Interface<? extends .ceylon.language.Set<? extends T>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Set.class, $reified$T));
        .ceylon.language.String lhs$134 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$135 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Set.class));
        if (lhs$134.equals(rhs$135)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`Set<T>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$134, rhs$135));
        }
        .ceylon.language.String lhs$136 = .ceylon.language.String.instance("interface ceylon.language.Set");
        .ceylon.language.String rhs$137 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Set.class));
        if (lhs$136.equals(rhs$137)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"interface ceylon.language.Set\"==ClassLiteral.classString(`Set<T&Float>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$136, rhs$137));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.Interface<? extends .ceylon.language.Set<? extends .java.lang.Object>>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.ceylon.language.Set.class, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.intersection($reified$T, .ceylon.language.Float.$TypeDescriptor$)));
        .ceylon.language.String lhs$138 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$139 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.ceylon.language.Set.class));
        if (lhs$138.equals(rhs$139)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`Set<T&Float>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$138, rhs$139));
        }
        .ceylon.language.String lhs$140 = .ceylon.language.String.instance("class com.redhat.ceylon.compiler.java.test.interop.ClassLiteral$MemberClass");
        .ceylon.language.String rhs$141 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.MemberClass.class));
        if (lhs$140.equals(rhs$141)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class com.redhat.ceylon.compiler.java.test.interop.ClassLiteral$MemberClass\"==ClassLiteral.classString(`ClassLiteral.MemberClass`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$140, rhs$141));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.MemberClass<? super .com.redhat.ceylon.compiler.java.test.interop.ClassLiteral, ? extends .com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.MemberClass, ? super .ceylon.language.Empty>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.MemberClass.class)));
        .ceylon.language.String lhs$142 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$143 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.MemberClass.class));
        if (lhs$142.equals(rhs$143)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ClassLiteral.MemberClass`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$142, rhs$143));
        }
        .ceylon.language.String lhs$144 = .ceylon.language.String.instance("class com.redhat.ceylon.compiler.java.test.interop.ClassLiteral$StaticMemberClass");
        .ceylon.language.String rhs$145 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.StaticMemberClass.class));
        if (lhs$144.equals(rhs$145)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"class com.redhat.ceylon.compiler.java.test.interop.ClassLiteral$StaticMemberClass\"==ClassLiteral.classString(`ClassLiteral.StaticMemberClass`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$144, rhs$145));
        }
        x = (.ceylon.language.meta.model.ClassOrInterface<? extends .java.lang.Object>)(.ceylon.language.meta.model.MemberClass<? super .java.lang.Object, ? extends .com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.StaticMemberClass, ? super .ceylon.language.Empty>).ceylon.language.meta.typeLiteral_.typeLiteral(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.member(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.class), .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.StaticMemberClass.class)));
        .ceylon.language.String lhs$146 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.Util.javaClassForModel(x)));
        .ceylon.language.String rhs$147 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.StaticMemberClass.class));
        if (lhs$146.equals(rhs$147)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "ClassLiteral.classString(x)==ClassLiteral.classString(`ClassLiteral.StaticMemberClass`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$146, rhs$147));
        }
        .ceylon.language.String lhs$148 = .ceylon.language.String.instance("interface java.util.Map$Entry");
        .ceylon.language.String rhs$149 = .ceylon.language.String.instance(.com.redhat.ceylon.compiler.java.test.interop.ClassLiteral.classString(.java.util.Map.Entry.class));
        if (lhs$148.equals(rhs$149)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "\"interface java.util.Map$Entry\"==ClassLiteral.classString(`Map<String,String>.Entry<String,String>`)") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$148, rhs$149));
        }
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.com.redhat.ceylon.compiler.java.metadata.Method
public final class classLiteral_run_ {
    
    private classLiteral_run_() {
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    public static void classLiteral_run() {
        .com.redhat.ceylon.compiler.java.test.interop.classLiteral_.<.ceylon.language.String>classLiteral(.ceylon.language.String.$TypeDescriptor$);
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static void main(.java.lang.String[] args) {
        .ceylon.language.process_.get_().setupArguments(args);
        .com.redhat.ceylon.compiler.java.test.interop.classLiteral_run_.classLiteral_run();
    }
}