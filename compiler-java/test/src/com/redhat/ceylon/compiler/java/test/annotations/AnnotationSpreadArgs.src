package com.redhat.ceylon.compiler.java.test.annotations;

@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({})
@interface AnnotationSpreadArgs$annotation$ {
    
    public abstract .java.lang.String[] args() default {};
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({
        .java.lang.annotation.ElementType.PARAMETER,
        .java.lang.annotation.ElementType.METHOD})
@interface AnnotationSpreadArgs$annotations$ {
    
    public abstract .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs$annotation$[] value();
}
final class AnnotationSpreadArgs implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.SequencedAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs, .ceylon.language.meta.declaration.FunctionDeclaration, .java.lang.Object>, .java.io.Serializable {
    
    AnnotationSpreadArgs() {
        (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$args$0 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
                this($ceylontmp$args$0);
            }
            returning null;
        );
    }
    
    AnnotationSpreadArgs(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs$annotation$ anno) {
        this(.com.redhat.ceylon.compiler.java.Util.sequentialWrapperBoxed(anno.args()));
    }
    
    AnnotationSpreadArgs(final .ceylon.language.Sequential<? extends .ceylon.language.String> args) {
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs.class);
    
    @.java.lang.Override
    public .java.lang.Class<? extends .java.lang.annotation.Annotation> annotationType() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs$annotation$.class;
    }
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({})
@interface AnnotationSpreadArgs2$annotation$ {
    
    public abstract .java.lang.String[] args();
}
@.java.lang.annotation.Retention(.java.lang.annotation.RetentionPolicy.RUNTIME)
@.java.lang.annotation.Target({
        .java.lang.annotation.ElementType.PARAMETER,
        .java.lang.annotation.ElementType.METHOD})
@interface AnnotationSpreadArgs2$annotations$ {
    
    public abstract .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2$annotation$[] value();
}
final class AnnotationSpreadArgs2 implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType, .ceylon.language.SequencedAnnotation<.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2, .ceylon.language.meta.declaration.FunctionDeclaration, .java.lang.Object>, .java.io.Serializable {
    
    protected AnnotationSpreadArgs2() {
        super();
    }
    
    AnnotationSpreadArgs2(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2$annotation$ anno) {
        this(.com.redhat.ceylon.compiler.java.Util.sequentialWrapperBoxed(anno.args()));
    }
    
    AnnotationSpreadArgs2(final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> args) {
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2.class);
    
    @.java.lang.Override
    public .java.lang.Class<? extends .java.lang.annotation.Annotation> annotationType() {
        return .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2$annotation$.class;
    }
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {256},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs.class)
final class annotationSpreadArgs_ {
    
    private annotationSpreadArgs_() {
    }
    
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs annotationSpreadArgs() {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> $ceylontmp$args$1 = (.ceylon.language.Sequential).ceylon.language.empty_.get_();
            }
            returning annotationSpreadArgs($ceylontmp$args$1);
        );
    }
    
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs annotationSpreadArgs(final .ceylon.language.Sequential<? extends .ceylon.language.String> args) {
        return new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs(args);
    }
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {256},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs.class)
final class annotationSpreadArgs2_ {
    
    private annotationSpreadArgs2_() {
    }
    
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs annotationSpreadArgs2(final .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> args) {
        return new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs(args.sequence());
    }
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {0},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs.class)
final class annotationSpreadArgs3_ {
    
    private annotationSpreadArgs3_() {
    }
    
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs annotationSpreadArgs3(final .ceylon.language.Sequential<? extends .ceylon.language.String> args) {
        return (
            let
            {
                .ceylon.language.Sequential<? extends .ceylon.language.String> arg$2$0 = args;
            }
            returning new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs(arg$2$0);
        );
    }
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {-32768},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2.class)
@.com.redhat.ceylon.compiler.java.metadata.StringExprs({@.com.redhat.ceylon.compiler.java.metadata.StringValue(
        name = "$arg$args",
        value = {
                "a",
                "b",
                "c"})})
final class annotationSpreadArgs4_ {
    
    private annotationSpreadArgs4_() {
    }
    
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2 annotationSpreadArgs4() {
        return (
            let
            {
                .ceylon.language.Iterable<? extends .ceylon.language.String, ? extends .java.lang.Object> arg$3$0 = (.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                        .ceylon.language.String.instance("a"),
                        .ceylon.language.String.instance("b"),
                        .ceylon.language.String.instance("c")});
            }
            returning new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2(arg$3$0);
        );
    }
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {-32768},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2.class)
@.com.redhat.ceylon.compiler.java.metadata.StringExprs({@.com.redhat.ceylon.compiler.java.metadata.StringValue(
        name = "$arg$args",
        value = {
                "a",
                "b",
                "c"})})
final class annotationSpreadArgs5_ {
    
    private annotationSpreadArgs5_() {
    }
    
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2 annotationSpreadArgs5() {
        return new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2((.ceylon.language.Sequence<? extends .ceylon.language.String>).ceylon.language.Tuple.instance(.ceylon.language.String.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.String.instance("a"),
                .ceylon.language.String.instance("b"),
                .ceylon.language.String.instance("c")}));
    }
}
@.com.redhat.ceylon.compiler.java.metadata.AnnotationInstantiation(
        arguments = {
                -32768,
                -32768,
                -32768},
        primary = .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2.class)
@.com.redhat.ceylon.compiler.java.metadata.StringExprs({
        @.com.redhat.ceylon.compiler.java.metadata.StringValue(
                name = "$arg$args",
                value = "a"),
        @.com.redhat.ceylon.compiler.java.metadata.StringValue(
                name = "$arg$args",
                value = "b"),
        @.com.redhat.ceylon.compiler.java.metadata.StringValue(
                name = "$arg$args",
                value = "c")})
final class annotationSpreadArgs6_ {
    
    private annotationSpreadArgs6_() {
    }
    
    static .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2 annotationSpreadArgs6() {
        return (
            let
            {
                .ceylon.language.Iterable arg$4$0 = new .com.redhat.ceylon.compiler.java.language.ConstantIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.NothingType, null, .ceylon.language.String.instance("a"), .ceylon.language.String.instance("b"), .ceylon.language.String.instance("c"));
            }
            returning new .com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2(arg$4$0);
        );
    }
}
final class annotationSpreadArgsUse_ {
    
    private annotationSpreadArgsUse_() {
    }
    
    @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs$annotations$({
            @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs$annotation$(args = {
                    "a",
                    "b",
                    "c"}),
            @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs$annotation$(args = {
                    "a",
                    "b",
                    "c"}),
            @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs$annotation$(args = {
                    "a",
                    "b",
                    "c"}),
            @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs$annotation$(args = {
                    "a",
                    "b",
                    "c"}),
            @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs$annotation$(args = {
                    "a",
                    "b",
                    "c"}),
            @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs$annotation$(args = {
                    "a",
                    "b",
                    "c"}),
            @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs$annotation$(args = {
                    "a",
                    "b",
                    "c"})})
    @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2$annotations$({
            @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2$annotation$(args = {
                    "a",
                    "b",
                    "c"}),
            @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2$annotation$(args = {
                    "a",
                    "b",
                    "c"}),
            @.com.redhat.ceylon.compiler.java.test.annotations.AnnotationSpreadArgs2$annotation$(args = {
                    "a",
                    "b",
                    "c"})})
    static void annotationSpreadArgsUse() {
    }
}