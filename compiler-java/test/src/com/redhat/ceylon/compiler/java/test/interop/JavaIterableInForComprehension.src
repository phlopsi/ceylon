package com.redhat.ceylon.compiler.java.test.interop;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class assertSameElements_ {
    
    private assertSameElements_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeParameters({@.com.redhat.ceylon.compiler.java.metadata.TypeParameter(
            value = "T",
            variance = .com.redhat.ceylon.compiler.java.metadata.Variance.NONE,
            satisfies = {"ceylon.language::Object"},
            caseTypes = {})})
    static <T>void assertSameElements(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $reified$T, @.com.redhat.ceylon.compiler.java.metadata.Name("j")
    @.com.redhat.ceylon.common.NonNull
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("java.lang::Iterable<T>")
    final .java.lang.Iterable<T> j, @.com.redhat.ceylon.compiler.java.metadata.Name("c")
    @.com.redhat.ceylon.common.NonNull
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("{T*}")
    final .ceylon.language.Iterable<? extends T, ? extends .java.lang.Object> c) {
        final .java.util.Iterator<T> jit = j.iterator();
        final .ceylon.language.Iterator<? extends T> cit = c.iterator();
        loop_0: while (true) {
            if (true) {
                if (.com.redhat.ceylon.compiler.java.Util.checkNull(jit).hasNext()) {
                    final T je = .com.redhat.ceylon.compiler.java.Util.checkNull(jit).next();
                    final T ce$4;
                    .java.lang.Object ce$3 = null;
                    if (!((ce$3 = cit.next()) instanceof .ceylon.language.Finished)) {
                        ce$4 = (T)ce$3;
                    } else {
                        throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "!is Finished ce=cit.next()") + .com.redhat.ceylon.compiler.java.Util.assertIsFailed(true, .ceylon.language.Finished.$TypeDescriptor$, ce$3));
                    }
                    T lhs$5 = .com.redhat.ceylon.compiler.java.Util.checkNull(je);
                    T rhs$6 = ce$4;
                    if (lhs$5.equals(rhs$6)) {
                    } else {
                        throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "je == ce") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$5, rhs$6));
                    }
                } else {
                    final .ceylon.language.Finished ce$2;
                    .java.lang.Object ce$1 = null;
                    if ((ce$1 = cit.next()) instanceof .ceylon.language.Finished) {
                        ce$2 = (.ceylon.language.Finished)ce$1;
                    } else {
                        throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "is Finished ce=cit.next()") + .com.redhat.ceylon.compiler.java.Util.assertIsFailed(false, .ceylon.language.Finished.$TypeDescriptor$, ce$1));
                    }
                    break loop_0;
                }
            } else {
                break loop_0;
            }
        }
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.com.redhat.ceylon.compiler.java.metadata.TypeAlias("java.lang::Iterable<ceylon.language::String>")
final class Strings {
    
    private Strings() {
    }
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(
        major = 8,
        minor = 1)
@.com.redhat.ceylon.compiler.java.metadata.TypeAlias("java.lang::Iterable<java.lang::String>")
final class JStrings {
    
    private JStrings() {
    }
}
final class javaIterableInForComprehension_ {
    
    private javaIterableInForComprehension_() {
    }
    
    static void javaIterableInForComprehension() {
        final .java.lang.Iterable<.ceylon.language.String> strings = .java.util.Arrays.<.ceylon.language.String>asList(.ceylon.language.String.instance("a"), .ceylon.language.String.instance("b"), .ceylon.language.String.instance("c"));
        final .java.lang.Iterable<.ceylon.language.Integer> ints = .java.util.Arrays.<.ceylon.language.Integer>asList(.ceylon.language.Integer.instance(1L), .ceylon.language.Integer.instance(2L), .ceylon.language.Integer.instance(3L));
        final .java.lang.Iterable<.java.lang.String> jstrings = .java.util.Arrays.<.java.lang.String>asList(new .java.lang.String("a"), new .java.lang.String("b"), new .java.lang.String("c"));
        final .java.lang.Iterable<.java.lang.Integer> jints = .java.util.Arrays.<.java.lang.Integer>asList(new .java.lang.Integer(1), new .java.lang.Integer(2), new .java.lang.Integer(3));
        .com.redhat.ceylon.compiler.java.test.interop.assertSameElements_.<.ceylon.language.String>assertSameElements(.ceylon.language.String.$TypeDescriptor$, strings, (.ceylon.language.Iterable)new .com.redhat.ceylon.compiler.java.language.ConstantIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$, new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.ceylon.language.String> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$){
                    {
                        $iterator$0 = strings.iterator();
                    }
                    private final .java.util.Iterator<.ceylon.language.String> $iterator$0;
                    private .ceylon.language.String s;
                    private boolean s$exhausted$;
                    
                    private final boolean s() {
                        s$exhausted$ = !$iterator$0.hasNext();
                        if (s$exhausted$) {
                            return false;
                        } else {
                            s = $iterator$0.next();
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.s()) {
                            final .ceylon.language.String s = this.s;
                            return .com.redhat.ceylon.compiler.java.Util.checkNull(s);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }));
        .com.redhat.ceylon.compiler.java.test.interop.assertSameElements_.<.java.lang.String>assertSameElements(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.String.class), jstrings, (.ceylon.language.Iterable)new .com.redhat.ceylon.compiler.java.language.ConstantIterable<.java.lang.String, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.String.class), .ceylon.language.Null.$TypeDescriptor$, new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.String, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.String.class), .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.java.lang.String> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.String>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.String.class)){
                    {
                        $iterator$0 = jstrings.iterator();
                    }
                    private final .java.util.Iterator<.java.lang.String> $iterator$0;
                    private .java.lang.String s;
                    private boolean s$exhausted$;
                    
                    private final boolean s() {
                        s$exhausted$ = !$iterator$0.hasNext();
                        if (s$exhausted$) {
                            return false;
                        } else {
                            s = $iterator$0.next();
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.s()) {
                            final .java.lang.String s = this.s;
                            return .com.redhat.ceylon.compiler.java.Util.checkNull(s);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }));
        .com.redhat.ceylon.compiler.java.test.interop.assertSameElements_.<.ceylon.language.Integer>assertSameElements(.ceylon.language.Integer.$TypeDescriptor$, ints, (.ceylon.language.Iterable)new .com.redhat.ceylon.compiler.java.language.ConstantIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$, new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                    {
                        $iterator$0 = ints.iterator();
                    }
                    private final .java.util.Iterator<.ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer s;
                    private boolean s$exhausted$;
                    
                    private final boolean s() {
                        s$exhausted$ = !$iterator$0.hasNext();
                        if (s$exhausted$) {
                            return false;
                        } else {
                            s = .com.redhat.ceylon.compiler.java.Util.checkNull($iterator$0.next());
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.s()) {
                            final .ceylon.language.Integer s = this.s;
                            return s;
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }));
        .com.redhat.ceylon.compiler.java.test.interop.assertSameElements_.<.java.lang.Integer>assertSameElements(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.Integer.class), jints, (.ceylon.language.Iterable)new .com.redhat.ceylon.compiler.java.language.ConstantIterable<.java.lang.Integer, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.Integer.class), .ceylon.language.Null.$TypeDescriptor$, new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.Integer, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.Integer.class), .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.java.lang.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.Integer>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.Integer.class)){
                    {
                        $iterator$0 = jints.iterator();
                    }
                    private final .java.util.Iterator<.java.lang.Integer> $iterator$0;
                    private .java.lang.Integer s;
                    private boolean s$exhausted$;
                    
                    private final boolean s() {
                        s$exhausted$ = !$iterator$0.hasNext();
                        if (s$exhausted$) {
                            return false;
                        } else {
                            s = $iterator$0.next();
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.s()) {
                            final .java.lang.Integer s = this.s;
                            return .com.redhat.ceylon.compiler.java.Util.checkNull(s);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }));
        .com.redhat.ceylon.compiler.java.test.interop.assertSameElements_.<.ceylon.language.String>assertSameElements(.ceylon.language.String.$TypeDescriptor$, (.java.lang.Iterable<.ceylon.language.String>)(.java.lang.Iterable)strings, (.ceylon.language.Iterable)new .com.redhat.ceylon.compiler.java.language.ConstantIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$, new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.String, .java.lang.Object>(.ceylon.language.String.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.ceylon.language.String> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.String>(.ceylon.language.String.$TypeDescriptor$){
                    {
                        $iterator$0 = strings.iterator();
                    }
                    private final .java.util.Iterator<.ceylon.language.String> $iterator$0;
                    private .ceylon.language.String s;
                    private boolean s$exhausted$;
                    
                    private final boolean s() {
                        s$exhausted$ = !$iterator$0.hasNext();
                        if (s$exhausted$) {
                            return false;
                        } else {
                            s = $iterator$0.next();
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.s()) {
                            final .ceylon.language.String s = this.s;
                            return .com.redhat.ceylon.compiler.java.Util.checkNull(s);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }));
        .com.redhat.ceylon.compiler.java.test.interop.assertSameElements_.<.java.lang.String>assertSameElements(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.String.class), (.java.lang.Iterable<.java.lang.String>)(.java.lang.Iterable)jstrings, (.ceylon.language.Iterable)new .com.redhat.ceylon.compiler.java.language.ConstantIterable<.java.lang.String, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.String.class), .ceylon.language.Null.$TypeDescriptor$, new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.java.lang.String, .java.lang.Object>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.String.class), .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.java.lang.String> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.java.lang.String>(.com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.java.lang.String.class)){
                    {
                        $iterator$0 = jstrings.iterator();
                    }
                    private final .java.util.Iterator<.java.lang.String> $iterator$0;
                    private .java.lang.String s;
                    private boolean s$exhausted$;
                    
                    private final boolean s() {
                        s$exhausted$ = !$iterator$0.hasNext();
                        if (s$exhausted$) {
                            return false;
                        } else {
                            s = $iterator$0.next();
                            return true;
                        }
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.s()) {
                            final .java.lang.String s = this.s;
                            return .com.redhat.ceylon.compiler.java.Util.checkNull(s);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }));
        .ceylon.language.Sequence<? extends .ceylon.language.Integer> lhs$13 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(3L)});
        .java.lang.Object rhs$14 = new .com.redhat.ceylon.compiler.java.language.ConstantIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$, new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                    {
                        $iterator$0 = ints.iterator();
                    }
                    private final .java.util.Iterator<.ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer x;
                    private boolean x$exhausted$;
                    
                    private final boolean x() {
                        x$exhausted$ = !$iterator$0.hasNext();
                        if (x$exhausted$) {
                            return false;
                        } else {
                            x = .com.redhat.ceylon.compiler.java.Util.checkNull($iterator$0.next());
                            return true;
                        }
                    }
                    
                    private final boolean $next$1() {
                        ifcomp_1: while (true) {
                            if (!this.x()) break ifcomp_1;
                            final .ceylon.language.Integer x = this.x;
                            if (x.longValue() % 2L == 1L) {
                                break ifcomp_1;
                            }
                        }
                        return !x$exhausted$;
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.$next$1()) {
                            final .ceylon.language.Integer x = this.x;
                            return x;
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }).sequence();
        if (lhs$13.equals(rhs$14)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "[1,3] == {for (x in ints) if(x%2==1) x}.sequence()") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$13, rhs$14));
        }
        .ceylon.language.Sequence<? extends .ceylon.language.Integer> lhs$17 = (.ceylon.language.Sequence<? extends .ceylon.language.Integer>).ceylon.language.Tuple.instance(.ceylon.language.Integer.$TypeDescriptor$, new .java.lang.Object[]{
                .ceylon.language.Integer.instance(1L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(3L),
                .ceylon.language.Integer.instance(2L),
                .ceylon.language.Integer.instance(4L),
                .ceylon.language.Integer.instance(6L),
                .ceylon.language.Integer.instance(3L),
                .ceylon.language.Integer.instance(6L),
                .ceylon.language.Integer.instance(9L)});
        .java.lang.Object rhs$18 = new .com.redhat.ceylon.compiler.java.language.ConstantIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$, new .com.redhat.ceylon.compiler.java.language.AbstractIterable<.ceylon.language.Integer, .java.lang.Object>(.ceylon.language.Integer.$TypeDescriptor$, .ceylon.language.Null.$TypeDescriptor$){
            
            public final .ceylon.language.Iterator<.ceylon.language.Integer> iterator() {
                return new .com.redhat.ceylon.compiler.java.language.AbstractIterator<.ceylon.language.Integer>(.ceylon.language.Integer.$TypeDescriptor$){
                    {
                        $iterator$0 = ints.iterator();
                    }
                    private final .java.util.Iterator<.ceylon.language.Integer> $iterator$0;
                    private .ceylon.language.Integer x;
                    private boolean x$exhausted$;
                    
                    private final boolean x() {
                        x$exhausted$ = !$iterator$0.hasNext();
                        if (x$exhausted$) {
                            return false;
                        } else {
                            x = .com.redhat.ceylon.compiler.java.Util.checkNull($iterator$0.next());
                            return true;
                        }
                    }
                    private .java.util.Iterator<.ceylon.language.Integer> $iterator$1;
                    
                    private final boolean $iterator$1() {
                        if (x$exhausted$) return false;
                        if ($iterator$1 != null) return true;
                        if (!this.x()) return false;
                        final .ceylon.language.Integer x = this.x;
                        $iterator$1 = ints.iterator();
                        return true;
                    }
                    private .ceylon.language.Integer y;
                    private boolean y$exhausted$;
                    
                    private final boolean y() {
                        while (this.$iterator$1()) {
                            y$exhausted$ = !$iterator$1.hasNext();
                            if (y$exhausted$) {
                                $iterator$1 = null;
                            } else {
                                y = .com.redhat.ceylon.compiler.java.Util.checkNull($iterator$1.next());
                                return true;
                            }
                        }
                        if (x$exhausted$) y$exhausted$ = true;
                        return false;
                    }
                    
                    public final .java.lang.Object next() {
                        if (this.y()) {
                            final .ceylon.language.Integer y = this.y;
                            final .ceylon.language.Integer x = this.x;
                            return x.times(y);
                        } else return .ceylon.language.finished_.get_();
                    }
                };
            }
        }).sequence();
        if (lhs$17.equals(rhs$18)) {
        } else {
            throw new .ceylon.language.AssertionError("Assertion failed" + (.java.lang.System.lineSeparator() + "\tviolated " + "[1,2,3,2,4,6,3,6,9] == {for (x in ints) for (y in ints) x*y}.sequence()") + .com.redhat.ceylon.compiler.java.Util.assertBinOpFailed(lhs$17, rhs$18));
        }
    }
}